# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}


#
# Other Types
#

type AggregatePost {
  count: Int!
}

type AggregateWeather {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createWeather(data: WeatherCreateInput!): Weather!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deletePost(where: PostWhereUniqueInput!): Post
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyWeathers(data: WeatherUpdateInput!, where: WeatherWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyWeathers(where: WeatherWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  weathers(where: WeatherWhereInput, orderBy: WeatherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Weather]!
  post(where: PostWhereUniqueInput!): Post
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  weathersConnection(where: WeatherWhereInput, orderBy: WeatherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeatherConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  weather(where: WeatherSubscriptionWhereInput): WeatherSubscriptionPayload
}

type Weather {
  temperature: Float!
  apparentTemperature: Float!
  summary: String!
  uvIndex: Int!
  humidity: Float!
}

type WeatherConnection {
  pageInfo: PageInfo!
  edges: [WeatherEdge]!
  aggregate: AggregateWeather!
}

input WeatherCreateInput {
  temperature: Float!
  apparentTemperature: Float!
  summary: String!
  uvIndex: Int!
  humidity: Float!
}

type WeatherEdge {
  node: Weather!
  cursor: String!
}

enum WeatherOrderByInput {
  temperature_ASC
  temperature_DESC
  apparentTemperature_ASC
  apparentTemperature_DESC
  summary_ASC
  summary_DESC
  uvIndex_ASC
  uvIndex_DESC
  humidity_ASC
  humidity_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WeatherPreviousValues {
  temperature: Float!
  apparentTemperature: Float!
  summary: String!
  uvIndex: Int!
  humidity: Float!
}

type WeatherSubscriptionPayload {
  mutation: MutationType!
  node: Weather
  updatedFields: [String!]
  previousValues: WeatherPreviousValues
}

input WeatherSubscriptionWhereInput {
  AND: [WeatherSubscriptionWhereInput!]
  OR: [WeatherSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WeatherWhereInput
}

input WeatherUpdateInput {
  temperature: Float
  apparentTemperature: Float
  summary: String
  uvIndex: Int
  humidity: Float
}

input WeatherWhereInput {
  AND: [WeatherWhereInput!]
  OR: [WeatherWhereInput!]
  temperature: Float
  temperature_not: Float
  temperature_in: [Float!]
  temperature_not_in: [Float!]
  temperature_lt: Float
  temperature_lte: Float
  temperature_gt: Float
  temperature_gte: Float
  apparentTemperature: Float
  apparentTemperature_not: Float
  apparentTemperature_in: [Float!]
  apparentTemperature_not_in: [Float!]
  apparentTemperature_lt: Float
  apparentTemperature_lte: Float
  apparentTemperature_gt: Float
  apparentTemperature_gte: Float
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  uvIndex: Int
  uvIndex_not: Int
  uvIndex_in: [Int!]
  uvIndex_not_in: [Int!]
  uvIndex_lt: Int
  uvIndex_lte: Int
  uvIndex_gt: Int
  uvIndex_gte: Int
  humidity: Float
  humidity_not: Float
  humidity_in: [Float!]
  humidity_not_in: [Float!]
  humidity_lt: Float
  humidity_lte: Float
  humidity_gt: Float
  humidity_gte: Float
}
